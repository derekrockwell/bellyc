#!/usr/bin/env ruby
require 'gli'
require 'bellyc'

include GLI::App

program_desc 'Scrape and analyze Belly Card checkin data'

version Bellyc::VERSION

desc 'Access Belly Website and Download Checkin Data'
command :crawl do |c|
  c.desc 'ignore duplicate limit'
  c.switch [ :i, "ignore-duplicates" ]

  c.desc 'username'
  c.flag [ :u, :username ]

  c.desc 'password'
  c.flag [ :p, :password ]

  c.action do |global_options,options,args|

    username = options[:u]
    password = options[:p]
    url = "https://www.bellycard.com/admin/sign_in"

    Crawler.new(url, username, password).run(options[:i])

    puts "finished crawling"
  end
end

desc 'Display number of new and repeat customers for a given range of dates'
arg_name 'locations'
command :report do |c|
  c.desc 'start_date (format yyyy-mm-dd)'
  c.default_value (Date.today - 7).strftime("%Y-%m-%d")
  c.flag [ :s, :start_date ]

  c.desc 'end_date (format yyyy-mm-dd)'
  c.default_value (Date.today).strftime("%Y-%m-%d")
  c.flag [ :e, :end_date ]

  c.action do |global_options,options,args|
    if args.empty?
      locations = [15050, 15080, 15051, 15052, 15081, 16826]
    else
      locations = args
    end

    start_date = Date.parse(options[:s])
    end_date = Date.parse(options[:e])

    Report.new(start_date, end_date, locations).run

    puts "Report finished for locations: #{ locations }"
    puts "From: #{ options[:s] } To: #{ options[:e] }"
  end
end

desc 'Export to CSV matrix report'
arg_name 'Filename'
command :export do |c|
  c.desc 'Start Date'
  c.flag [ :s, :start_date ]

  c.desc 'End Date'
  c.flag [ :e, :end_date ]


  c.action do |global_options,options,args|
    
    start_date = Date.parse(options[:s])
    end_date = Date.parse(options[:e])
    if args
      filename = args[0]
    else
      filename = "report.csv"
    end

    CSVExport.new(start_date, end_date, filename).run
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
